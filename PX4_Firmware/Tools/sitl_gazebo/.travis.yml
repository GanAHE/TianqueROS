env:
  global:
    - CCACHE_DIR=$HOME/.ccache
    - CMAKE_BUILD="mkdir Build; cd Build; cmake ..; make -j$(nproc) -l$(nproc)"
    - CMAKE_UNIT_TEST_BUILD="mkdir Build; cd Build; cmake -DENABLE_UNIT_TESTS=On ..;
      make -j$(nproc) -l$(nproc); make -j$(nproc) test"
    - CATKIN_BUILD="mkdir -p ~/catkin_ws/src; cd ~/catkin_ws; catkin init;
      ln -s ${TRAVIS_BUILD_DIR} src; catkin build -j$(nproc) -l$(nproc) -DBUILD_ROS_INTERFACE=ON;
      cd build/mavlink_sitl_gazebo/; catkin run_tests"
    - KINETIC="source /opt/ros/kinetic/setup.bash; ${CATKIN_BUILD}"
    - MELODIC="source /opt/ros/melodic/setup.bash; ${CATKIN_BUILD}"

branches:
  only:
    - master

matrix:
    include:
        - name: CMake build (Gazebo 7)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-simulation-xenial:2020-03-29
            - BUILD=${CMAKE_BUILD}
        - name: CMake unit tests build and run (Gazebo 7)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-simulation-xenial:2020-03-29
            - BUILD=${CMAKE_UNIT_TEST_BUILD}
        - name: CMake build (Gazebo 9)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-simulation-bionic:2020-03-29
            - BUILD=${CMAKE_BUILD}
        - name: CMake unit tests build and run (Gazebo 9)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-simulation-bionic:2020-03-29
            - BUILD=${CMAKE_UNIT_TEST_BUILD}
        - name: Catkin build on Ubuntu 16.04 with ROS Kinetic (Gazebo 7)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-ros-kinetic:2020-03-29
            - BUILD=${KINETIC}
        - name: Catkin build on Ubuntu 18.04 with ROS Melodic (Gazebo 9)
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-ros-melodic:2020-03-29
            - BUILD=${MELODIC}
        - name: Validate SDF schemas
          os: linux
          language: cpp
          services:
            - docker
          cache:
            ccache: true
          env:
            - PX4_DOCKER_REPO=px4io/px4-dev-simulation-bionic:2020-03-29
            - BUILD="source ./scripts/validate_sdf.bash"
        - name: macOS Mojave (Xcode 11.3)
          os: osx
          osx_image: xcode11.3
          language: cpp
          cache:
            ccache: true

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update;
      git clone -b release-1.10.0 https://github.com/google/googletest;
      git clone --depth 1 https://github.com/mavlink/c_library_v2.git /usr/local/include/mavlink/v2.0;
    fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      pushd googletest;
      mkdir build;
      pushd build;
      cmake ..;
      make;
      make install;
      popd;
      popd;
      brew unlink python@2;
      brew install gstreamer gst-plugins-base gst-plugins-good glib python;
      brew tap PX4/px4;
      brew install px4-dev;
      brew install px4-sim;
      pip3 install --user --upgrade setuptools;
      pip3 install --user --upgrade rospkg pyserial empy toml numpy pandas jinja2;
    fi

after_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew cleanup;
      rm -rf /usr/local/include/mavlink/v2.0/.git googletest/.git;
    fi

script:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      echo $PYTHONPATH;
      mkdir build;
      (cd build && cmake -DENABLE_UNIT_TESTS=On .. &&
      make -j$(sysctl -n hw.physicalcpu) -l$(sysctl -n hw.physicalcpu) &&
      make test);
    else
      docker run -it --rm -w ${TRAVIS_BUILD_DIR} --env=CCACHE_DIR="${CCACHE_DIR}"
        --volume=${CCACHE_DIR}:${CCACHE_DIR}:rw
        --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR}:rw
        ${PX4_DOCKER_REPO} /bin/bash -e -c "${BUILD}";
    fi
